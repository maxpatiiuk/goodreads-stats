@layer utilities {
  /*
   * Grid-based table implementation for increased flexibility
   * Does not sacrifice accessibility thanks to the [role] attributes
   * Allows for things like sticky headers and having entire row be a link/button
   * You can set column sizes by adding a className like this:
   *   grid-cols-[repeat(4,1fr)_auto_auto_min-content_minmax(10rem,1fr)]
   * There is much more flexibility in how columns should be sized.
   */
  .grid-table:is(table, [role~='table']) {
    @apply grid;
  }

  .grid-table :is(thead, tbody, tr, [role~='rowgroup'], [role~='row']) {
    @apply contents;
  }

  .grid-table
    :is(th, td, [role~='columnheader'], [role~='rowheader'], [role~='cell']) {
    @apply flex items-center gap-1;
  }

  .link {
    @apply inline-flex cursor-pointer items-center gap-2
    text-black active:underline enabled:hover:text-brand-300 disabled:!ring-0 dark:text-gray-200;
  }

  a.link {
    @apply text-blue-500 hover:text-brand-400 hover:text-blue-800 dark:hover:text-brand-300 dark:hover:text-blue-300;
  }

  .link[aria-current]:not(.aria-handled) {
    @apply text-brand-300;
  }
}
